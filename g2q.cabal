-- Initial g2q.cabal generated by cabal init.  For further documentation, 
-- see http://haskell.org/cabal/users-guide/

name:                g2q
version:             0.1.0.0
synopsis:            G2Q allows constraint programming, via writing Haskell predicates.
description:         G2Q allows constraint programming, via writing Haskell predicates.
					 A quasiquoter, g2, is provided which can take concrete arguments at runtime, and solve for unknown symbolic arguments.
					 For example, to find inputs from a list xs which sum to a given number n, you can write:

					 ```
					 sumToN :: Int -> [Int] -> IO (Maybe [Int])
					 sumToN = [g2| \(n :: Int) (xs :: [Int]) ->
					               ?(ys :: [Int])
					             |  sum ys == n
					             && all (\e -> e `elem` xs) ys
					             && length ys >= 1 |]
					 ```
license:             BSD3
license-file:        LICENSE
author:              William Hallahan, Anton Xue
maintainer:          william.hallahan@yale.edu
-- copyright:           
category:            Formal Methods, Symbolic Computation
build-type:          Simple
extra-source-files:  ChangeLog.md
cabal-version:       >=1.10

source-repository head
    type:       git
    location:   https://github.com/BillHallahan/G2Q.git


library
  exposed-modules:       G2Q.Base
  -- other-modules:       
  -- other-extensions:    
  build-depends:         base >=4.10 && <4.11
                       , g2 >= 0.1.0.1 && < 0.1.1.0
  hs-source-dirs:      src
  default-language:    Haskell2010
